import Cocoa
import SwiftUI

class AppDelegate: NSObject, NSApplicationDelegate {
    struct Dependencies {
        let llmEngine: LLMEngine
        let audioEngine: AudioEngine
        let themeManager: ThemeManager
        let modelManager: ModelManager
    }

    static var dependencies: Dependencies!

    func applicationDidFinishLaunching(_ notification: Notification) {
        loadEnvironmentVariables()
        createDocumentsFolder()
    }
    
    private func loadEnvironmentVariables() {
        guard let resourcesPath = Bundle.main.resourcePath else { return }
        let configPath = resourcesPath + "/config.env"
        
        do {
            let configContent = try String(contentsOfFile: configPath, encoding: .utf8)
            for line in configContent.components(separatedBy: .newlines) {
                let trimmedLine = line.trimmingCharacters(in: .whitespacesAndNewlines)
                if trimmedLine.hasPrefix("HF_TOKEN=") {
                    let token = String(trimmedLine.dropFirst("HF_TOKEN=".count))
                    if !token.isEmpty {
                        setenv("HF_TOKEN", token, 1)
                        print("üîß Set HF_TOKEN environment variable")
                    }
                }
            }
        } catch {
            print("‚ö†Ô∏è Failed to load config.env: \(error)")
        }
    }
    
    private func createDocumentsFolder() {
        print("üöÄ AppDelegate.createDocumentsFolder() –≤—ã–∑–≤–∞–Ω–∞")
        
        let fileManager = FileManager.default
        print("üìÇ –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ Documents...")
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ø–∞–ø–∫—É Documents –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let documentsURL = URL(fileURLWithPath: NSHomeDirectory()).appendingPathComponent("Documents")
        print("üìÇ Documents –ø—É—Ç—å: \(documentsURL.path)")
        
        let killahDocumentsURL = documentsURL.appendingPathComponent("Killah")
        print("üìÇ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ Killah: \(killahDocumentsURL.path)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        let folderExists = fileManager.fileExists(atPath: killahDocumentsURL.path)
        print("üîç –ü–∞–ø–∫–∞ Killah —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: \(folderExists)")
        
        if !folderExists {
            print("üìÅ –ü–∞–ø–∫–∞ Killah –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º...")
            do {
                try fileManager.createDirectory(at: killahDocumentsURL, withIntermediateDirectories: true)
                print("‚úÖ –ü–∞–ø–∫–∞ Killah —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: \(killahDocumentsURL.path)")
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–∞
                let created = fileManager.fileExists(atPath: killahDocumentsURL.path)
                print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: \(created)")
                
                // –°–æ–∑–¥–∞–µ–º README —Ñ–∞–π–ª
                print("üìù –°–æ–∑–¥–∞–µ–º README —Ñ–∞–π–ª...")
                let readmeContent = """
                # Killah Documents
                
                This folder contains your Killah text editor documents.
                
                Created by Killah Text Editor
                """
                
                let readmePath = killahDocumentsURL.appendingPathComponent("README.md")
                print("üìÅ –ü—É—Ç—å –∫ README: \(readmePath.path)")
                
                try readmeContent.write(to: readmePath, atomically: true, encoding: .utf8)
                print("‚úÖ README —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: \(readmePath.path)")
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: \(error)")
                print("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: \(error.localizedDescription)")
            }
        } else {
            print("üìÅ –ü–∞–ø–∫–∞ Killah —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: \(killahDocumentsURL.path)")
        }
    }
}
