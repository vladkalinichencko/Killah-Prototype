import SwiftUI
import UniformTypeIdentifiers
import AppKit
import Foundation


struct TextDocument: FileDocument {
    static var readableContentTypes: [UTType] { [.plainText, .rtf] }
    var text: String

    init(text: String = "") {
        let initialText = NSAttributedString(string: text, attributes: [.font: FontManager.shared.defaultEditorFont()])
        self.text = initialText.string
    }
    
    init(fromFileAt url: URL) throws {
        let data = try Data(contentsOf: url)

        if url.pathExtension.lowercased() == "rtf" {
            if let attr = NSAttributedString(rtf: data, documentAttributes: nil) {
                self.text = attr.string
            } else {
                self.text = ""
            }
        } else {
            self.text = String(data: data, encoding: .utf8) ?? ""
        }
    }

    init(configuration: ReadConfiguration) throws {
        if configuration.contentType == .rtf {
            guard let data = configuration.file.regularFileContents,
                  let attr = NSAttributedString(rtf: data, documentAttributes: nil) else {
                text = ""
                return
            }
            text = attr.string
        } else {
            if let data = configuration.file.regularFileContents,
               let str = String(data: data, encoding: .utf8) {
                text = str
            } else {
                text = ""
            }
        }
    }

    func fileWrapper(configuration: WriteConfiguration) throws -> FileWrapper {
        if configuration.contentType == .rtf {
            let attr = NSAttributedString(string: text)
            guard let data = attr.rtf(from: NSRange(location: 0, length: attr.length), documentAttributes: [:]) else {
                throw CocoaError(.fileWriteUnknown)
            }
            return FileWrapper(regularFileWithContents: data)
        } else {
            let data = text.data(using: .utf8) ?? Data()
            return FileWrapper(regularFileWithContents: data)
        }
    }
}


struct DocumentItem: Identifiable {
    let id = UUID()
    let url: URL
    let filename: String
    let contentPreview: String
    let date: Date

    var formattedDate: String {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        return formatter.string(from: date)
    }
    
    static func loadFromDirectory() -> [DocumentItem] {
        print("üöÄ loadFromDirectory() –≤—ã–∑–≤–∞–Ω–∞")
        
        let fileManager = FileManager.default
        print("üìÇ –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ Documents...")
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ø–∞–ø–∫—É Documents –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let documentsURL = URL(fileURLWithPath: NSHomeDirectory()).appendingPathComponent("Documents")
        print("üìÇ Documents –ø—É—Ç—å: \(documentsURL.path)")
        
        let killahDocumentsURL = documentsURL.appendingPathComponent("Killah")
        print("üìÇ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ Killah: \(killahDocumentsURL.path)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        let folderExists = fileManager.fileExists(atPath: killahDocumentsURL.path)
        print("üîç –ü–∞–ø–∫–∞ Killah —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: \(folderExists)")
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É Killah –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if !folderExists {
            print("üìÅ –ü–∞–ø–∫–∞ Killah –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º...")
            do {
                try fileManager.createDirectory(at: killahDocumentsURL, withIntermediateDirectories: true)
                print("‚úÖ –ü–∞–ø–∫–∞ Killah —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: \(killahDocumentsURL.path)")
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–∞
                let created = fileManager.fileExists(atPath: killahDocumentsURL.path)
                print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: \(created)")
                
                // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Finder
                createFolderIcon(for: killahDocumentsURL)
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ Killah: \(error)")
                print("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: \(error.localizedDescription)")
                return []
            }
        } else {
            print("üìÅ –ü–∞–ø–∫–∞ Killah —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: \(killahDocumentsURL.path)")
        }

        print("üìÇ –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É: \(killahDocumentsURL.path)")

        let urls: [URL]
        do {
            urls = try fileManager.contentsOfDirectory(at: killahDocumentsURL, includingPropertiesForKeys: nil)
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏: \(error)")
            print("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: \(error.localizedDescription)")
            return []
        }

        print("üîé –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: \(urls.count)")
        urls.forEach { print(" - \($0.lastPathComponent)") }

        let documents = urls.compactMap { url -> DocumentItem? in
            guard ["txt", "rtf"].contains(url.pathExtension.lowercased()) else { return nil }

            let content = (try? String(contentsOf: url, encoding: .utf8)) ?? "..."
            let preview = content.components(separatedBy: .whitespacesAndNewlines)
                                 .prefix(20)
                                 .joined(separator: " ")

            let date = (try? fileManager.attributesOfItem(atPath: url.path)[.modificationDate] as? Date) ?? Date()

            return DocumentItem(
                url: url,
                filename: url.lastPathComponent,
                contentPreview: preview,
                date: date
            )
        }

        print("üìÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º \(documents.count) –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        return documents
    }
    
    private static func createFolderIcon(for folderURL: URL) {
        print("üé® createFolderIcon() –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–∞–ø–∫–∏: \(folderURL.path)")
        
        // –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–æ—Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫—É –¥–ª—è –∏–∫–æ–Ω–∫–∏
        print("üîç –ò—â–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –±–∞–Ω–¥–ª–µ...")
        if let appIconPath = Bundle.main.path(forResource: "app-icon-512", ofType: "png", inDirectory: "Assets.xcassets/AppIcon.appiconset") {
            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: \(appIconPath)")
            let iconPath = folderURL.appendingPathComponent("folder-icon.png")
            print("üìÅ –ö–æ–ø–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É –≤: \(iconPath.path)")
            
            do {
                try FileManager.default.copyItem(atPath: appIconPath, toPath: iconPath.path)
                print("‚úÖ –ò–∫–æ–Ω–∫–∞ –ø–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∞: \(iconPath.path)")
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏: \(error)")
                print("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: \(error.localizedDescription)")
            }
        } else {
            print("‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–Ω–¥–ª–µ")
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–Ω–¥–ª–∞...")
            if let bundlePath = Bundle.main.resourcePath {
                print("üìÇ –ü—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å–∞–º: \(bundlePath)")
                do {
                    let contents = try FileManager.default.contentsOfDirectory(atPath: bundlePath)
                    print("üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–Ω–¥–ª–∞: \(contents)")
                } catch {
                    print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–Ω–¥–ª–∞: \(error)")
                }
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º README —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–∞–ø–∫–∏
        print("üìù –°–æ–∑–¥–∞–µ–º README —Ñ–∞–π–ª...")
        let readmeContent = """
        # Killah Documents
        
        This folder contains your Killah text editor documents.
        
        Created by Killah Text Editor
        """
        
        let readmePath = folderURL.appendingPathComponent("README.md")
        print("üìÅ –ü—É—Ç—å –∫ README: \(readmePath.path)")
        
        do {
            try readmeContent.write(to: readmePath, atomically: true, encoding: .utf8)
            print("‚úÖ README —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: \(readmePath.path)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è README —Ñ–∞–π–ª–∞: \(error)")
            print("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: \(error.localizedDescription)")
        }
    }
}



struct DocumentOpenerView: View {
    var fileURL: URL
    @State private var text: String

    init(fileURL: URL) {
        self.fileURL = fileURL
        if let data = try? Data(contentsOf: fileURL),
           let str = String(data: data, encoding: .utf8) {
            _text = State(initialValue: str)
        } else {
            _text = State(initialValue: "[–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞]")
        }
    }

    var body: some View {
        TextEditor(text: $text)
            .padding()
    }
}

